"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.currentUser = void 0;
const not_authorized_error_1 = require("../errors/not-authorized-error");
const api_1 = require("../utils/api");
const currentUser = (req, res, next) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        if (!req.headers.authorization)
            throw new not_authorized_error_1.NotAuthorizedError();
        const response = yield (0, api_1.apiCall)({
            url: `${process.env.AUTH0_ISSUER}/token/introspection`,
            method: "POST",
            body: {
                "token": req.headers.authorization.replace(/^Bearer /, ""),
                "client_id": process.env.AUTH0_ID,
                "client_secret": process.env.AUTH0_SECRET
            }
        });
        if (response.status !== 200)
            throw new not_authorized_error_1.NotAuthorizedError();
        const { active, sub } = response.data;
        //if (active && sub.trim() === req.url.split("?")[0]) {
        if (active && sub !== undefined) {
            req.currentUser = { sub: sub };
            next();
        }
        else {
            throw new not_authorized_error_1.NotAuthorizedError();
        }
    }
    catch (err) {
        console.log(`Error while getting current user:${err}`);
    }
    next();
});
exports.currentUser = currentUser;
